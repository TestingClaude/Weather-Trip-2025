<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Utah & Colorado Weather</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        h1 {
            text-align: center;
            color: white;
            margin-bottom: 30px;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .state-section {
            margin-bottom: 40px;
        }

        .state-title {
            color: white;
            font-size: 1.8rem;
            margin-bottom: 20px;
            text-align: center;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
        }

        .cities-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .city-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .city-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
        }

        .city-name {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }

        .forecast-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
            width: 100%;
        }

        .day-forecast {
            text-align: center;
            padding: 10px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 8px;
            transition: background-color 0.3s ease;
            min-width: 0;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .day-forecast:hover {
            background: rgba(102, 126, 234, 0.2);
        }

        .day-name {
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
            font-size: 0.9rem;
        }

        .weather-icon {
            font-size: 2rem;
            margin: 5px 0;
        }

        .temperature {
            font-size: 1.1rem;
            font-weight: bold;
            color: #333;
        }

        .condition {
            font-size: 0.8rem;
            color: #666;
            margin-top: 3px;
        }

        .map-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            margin: 30px 0;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .map-title {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 20px;
            text-align: center;
        }

        .map-container {
            position: relative;
            width: 100%;
            height: 600px;
            border-radius: 10px;
            overflow: hidden;
            border: 2px solid rgba(102, 126, 234, 0.3);
            background-image: url('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }

        .map-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                url('https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/export?bbox=-114.0,-34.0,-102.0,45.0&size=800,600&format=png32&f=image'),
                url('https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/export?bbox=-114.053932,36.997968,-102.041524,45.001545&size=800,600&format=png32&f=image');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }

        .city-marker {
            position: absolute;
            transform: translate(-50%, -50%);
            cursor: pointer;
            z-index: 20;
        }

        .marker-dot {
            width: 18px;
            height: 18px;
            background: #667eea;
            border: 4px solid white;
            border-radius: 50%;
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
        }

        .marker-dot:hover {
            transform: scale(1.3);
            box-shadow: 0 5px 16px rgba(0, 0, 0, 0.6);
        }

        .city-info {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.95);
            padding: 10px 14px;
            border-radius: 20px;
            font-size: 0.95rem;
            font-weight: bold;
            color: #333;
            white-space: nowrap;
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.8);
        }

        .temperature-badge {
            background: #667eea;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.85rem;
            margin-left: 6px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        .distance-line {
            position: absolute;
            height: 2px;
            background: rgba(255, 255, 255, 0.8);
            transform-origin: left center;
            pointer-events: none;
            z-index: 5;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
        }

        .distance-label {
            position: absolute;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 10px;
            font-size: 0.75rem;
            font-weight: bold;
            transform: translate(-50%, -50%);
            pointer-events: none;
            z-index: 15;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .state-legend {
            position: absolute;
            top: 15px;
            right: 15px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 12px;
            border-radius: 10px;
            font-size: 0.85rem;
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

        .legend-item:last-child {
            margin-bottom: 0;
        }

        .legend-color {
            width: 14px;
            height: 14px;
            border-radius: 50%;
            margin-right: 8px;
            border: 2px solid white;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.4);
        }

        .utah-marker { background: #667eea; }
        .colorado-marker { background: #764ba2; }

        @media (max-width: 768px) {
            .forecast-grid {
                grid-template-columns: repeat(3, 1fr);
                gap: 8px;
            }
            
            .day-forecast:nth-child(4),
            .day-forecast:nth-child(5) {
                grid-column: span 1;
            }
        }

        @media (max-width: 480px) {
            .forecast-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 8px;
            }
            
            .day-forecast:nth-child(5) {
                grid-column: 1 / -1;
                max-width: 200px;
                margin: 0 auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Utah & Colorado Weather Forecast</h1>
        
        <div class="map-section">
            <h3 class="map-title">Interactive Weather Map - Utah & Colorado</h3>
            <div class="map-container" id="weather-map">
                <div class="state-legend">
                    <div class="legend-item">
                        <div class="legend-color utah-marker"></div>
                        <span>Utah</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color colorado-marker"></div>
                        <span>Colorado</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="state-section">
            <h2 class="state-title">Utah</h2>
            <div class="cities-grid" id="utah-cities"></div>
        </div>
        
        <div class="state-section">
            <h2 class="state-title">Colorado</h2>
            <div class="cities-grid" id="colorado-cities"></div>
        </div>
    </div>

    <script>
        // Weather API configuration
        const WEATHER_API_KEY = '7c59d4a13d7969f4713c95c38a72c667';
        const WEATHER_API_BASE = 'https://api.openweathermap.org/data/2.5';

        // Store current weather data globally
        let currentWeatherData = {};
        let forecastData = {};

        // City data with coordinates and map positions
        const cities = {
            utah: [
                { name: 'Salt Lake City', lat: 40.7608, lon: -111.8910, mapX: 25, mapY: 35, isMajor: true },
                { name: 'Provo', lat: 40.2338, lon: -111.6585, mapX: 28, mapY: 45, isMajor: false },
                { name: 'Ogden', lat: 41.2230, lon: -111.9738, mapX: 22, mapY: 25, isMajor: false },
                { name: 'Park City', lat: 40.6461, lon: -111.4980, mapX: 32, mapY: 38, isMajor: false },
                { name: 'Moab', lat: 38.5733, lon: -109.5498, mapX: 42, mapY: 75, isMajor: true }
            ],
            colorado: [
                { name: 'Denver', lat: 39.7392, lon: -104.9903, mapX: 65, mapY: 55, isMajor: true },
                { name: 'Colorado Springs', lat: 38.8339, lon: -104.8214, mapX: 68, mapY: 70, isMajor: true },
                { name: 'Boulder', lat: 40.0150, lon: -105.2705, mapX: 62, mapY: 50, isMajor: false },
                { name: 'Aspen', lat: 39.1911, lon: -106.8175, mapX: 48, mapY: 65, isMajor: true }
            ]
        };

        // Weather condition mapping from OpenWeatherMap to emojis
        const weatherIconMap = {
            '01d': '☀️', '01n': '🌙',
            '02d': '⛅', '02n': '☁️',
            '03d': '☁️', '03n': '☁️',
            '04d': '☁️', '04n': '☁️',
            '09d': '🌧️', '09n': '🌧️',
            '10d': '🌦️', '10n': '🌧️',
            '11d': '⛈️', '11n': '⛈️',
            '13d': '❄️', '13n': '❄️',
            '50d': '🌫️', '50n': '🌫️'
        };

        // Fetch weather data from OpenWeatherMap API
        async function fetchWeatherData(city) {
            try {
                // Fetch 5-day forecast
                const forecastResponse = await fetch(
                    `${WEATHER_API_BASE}/forecast?q=${city.name}&appid=${WEATHER_API_KEY}&units=metric`
                );
                
                if (!forecastResponse.ok) {
                    throw new Error(`Weather API error: ${forecastResponse.status}`);
                }
                
                const forecastData = await forecastResponse.json();
                
                // Process forecast data - get one reading per day at noon
                const dailyForecasts = [];
                const processedDates = new Set();
                
                forecastData.list.forEach(item => {
                    const date = new Date(item.dt * 1000);
                    const dateStr = date.toDateString();
                    
                    // Take the first forecast for each day (or closest to noon)
                    if (!processedDates.has(dateStr) && dailyForecasts.length < 5) {
                        processedDates.add(dateStr);
                        
                        const dayNames = ['Today', 'Tomorrow', 'Day 3', 'Day 4', 'Day 5'];
                        
                        dailyForecasts.push({
                            day: dayNames[dailyForecasts.length],
                            temperature: Math.round(item.main.temp),
                            condition: item.weather[0].description.split(' ').map(word => 
                                word.charAt(0).toUpperCase() + word.slice(1)
                            ).join(' '),
                            icon: weatherIconMap[item.weather[0].icon] || '🌤️'
                        });
                    }
                });
                
                // Store current temperature for map
                if (dailyForecasts.length > 0) {
                    currentWeatherData[city.name] = dailyForecasts[0].temperature;
                }
                
                return dailyForecasts;
                
            } catch (error) {
                console.error(`Error fetching weather for ${city.name}:`, error);
                // Return fallback data if API fails
                return generateFallbackWeatherData(city.name);
            }
        }

        // Fallback weather data generator (in case API fails)
        function generateFallbackWeatherData(cityName) {
            const days = ['Today', 'Tomorrow', 'Day 3', 'Day 4', 'Day 5'];
            const forecast = [];
            
            let baseTemp = 15;
            if (cityName.includes('Aspen') || cityName.includes('Park City')) {
                baseTemp = 8;
            } else if (cityName.includes('Moab')) {
                baseTemp = 20;
            }
            
            const fallbackConditions = [
                { condition: 'Sunny', icon: '☀️' },
                { condition: 'Partly Cloudy', icon: '⛅' },
                { condition: 'Cloudy', icon: '☁️' },
                { condition: 'Light Rain', icon: '🌧️' }
            ];
            
            for (let i = 0; i < 5; i++) {
                const tempVariation = (Math.random() - 0.5) * 20;
                const temp = Math.round(baseTemp + tempVariation);
                const weatherIndex = Math.floor(Math.random() * fallbackConditions.length);
                
                forecast.push({
                    day: days[i],
                    temperature: temp,
                    condition: fallbackConditions[weatherIndex].condition,
                    icon: fallbackConditions[weatherIndex].icon
                });
            }
            
            currentWeatherData[cityName] = forecast[0].temperature;
            return forecast;
        }

        // Calculate distance between two points using Haversine formula
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Earth's radius in km
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                     Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                     Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return Math.round(R * c);
        }

        // Create city weather card with real API data
        async function createCityCard(city) {
            const forecast = await fetchWeatherData(city);
            
            return `
                <div class="city-card">
                    <div class="city-name">${city.name}</div>
                    <div class="forecast-grid">
                        ${forecast.map(day => `
                            <div class="day-forecast">
                                <div class="day-name">${day.day}</div>
                                <div class="weather-icon">${day.icon}</div>
                                <div class="temperature">${day.temperature}°C</div>
                                <div class="condition">${day.condition}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }

        // Create interactive map with terrain imagery
        function createMap() {
            const mapContainer = document.getElementById('weather-map');
            const allCities = [...cities.utah, ...cities.colorado];
            const majorCities = allCities.filter(city => city.isMajor);
            
            // Clear existing content and add terrain background
            mapContainer.innerHTML = `
                <div class="map-overlay"></div>
                <div class="state-legend">
                    <div class="legend-item">
                        <div class="legend-color utah-marker"></div>
                        <span>Utah</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color colorado-marker"></div>
                        <span>Colorado</span>
                    </div>
                </div>
            `;

            // Set terrain background for Utah and Colorado region
            mapContainer.style.backgroundImage = `url('https://mt1.google.com/vt/lyrs=p&x=0&y=0&z=6')`;
            
            // Add distance lines only between major cities (5 cities: Salt Lake City, Moab, Denver, Colorado Springs, Aspen)
            for (let i = 0; i < majorCities.length; i++) {
                for (let j = i + 1; j < majorCities.length; j++) {
                    const city1 = majorCities[i];
                    const city2 = majorCities[j];
                    
                    const distance = calculateDistance(
                        city1.lat, city1.lon,
                        city2.lat, city2.lon
                    );
                    
                    // Calculate line position and angle
                    const x1 = (city1.mapX / 100) * mapContainer.offsetWidth;
                    const y1 = (city1.mapY / 100) * mapContainer.offsetHeight;
                    const x2 = (city2.mapX / 100) * mapContainer.offsetWidth;
                    const y2 = (city2.mapY / 100) * mapContainer.offsetHeight;
                    
                    const length = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
                    const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
                    
                    // Create distance line
                    const line = document.createElement('div');
                    line.className = 'distance-line';
                    line.style.left = x1 + 'px';
                    line.style.top = y1 + 'px';
                    line.style.width = length + 'px';
                    line.style.transform = `rotate(${angle}deg)`;
                    mapContainer.appendChild(line);
                    
                    // Create distance label
                    const label = document.createElement('div');
                    label.className = 'distance-label';
                    label.textContent = distance + ' km';
                    label.style.left = (x1 + x2) / 2 + 'px';
                    label.style.top = (y1 + y2) / 2 + 'px';
                    mapContainer.appendChild(label);
                }
            }
            
            // Add city markers for all cities
            allCities.forEach(city => {
                const isUtah = cities.utah.includes(city);
                const temp = currentWeatherData[city.name] || 0;
                
                const marker = document.createElement('div');
                marker.className = 'city-marker';
                marker.style.left = city.mapX + '%';
                marker.style.top = city.mapY + '%';
                
                marker.innerHTML = `
                    <div class="marker-dot ${isUtah ? 'utah-marker' : 'colorado-marker'}"></div>
                    <div class="city-info">
                        ${city.name}
                        <span class="temperature-badge">${temp}°C</span>
                    </div>
                `;
                
                mapContainer.appendChild(marker);
            });
        }

        // Initialize the app with real weather data
        async function initializeApp() {
            try {
                // Show loading state
                document.getElementById('utah-cities').innerHTML = '<div style="text-align: center; padding: 20px; color: white;">Loading weather data...</div>';
                document.getElementById('colorado-cities').innerHTML = '<div style="text-align: center; padding: 20px; color: white;">Loading weather data...</div>';
                
                const allCities = [...cities.utah, ...cities.colorado];
                
                // Fetch weather data for all cities in parallel
                const weatherPromises = allCities.map(city => fetchWeatherData(city));
                await Promise.all(weatherPromises);
                
                // Create the interactive map
                createMap();
                
                // Render Utah cities
                const utahContainer = document.getElementById('utah-cities');
                const utahCards = await Promise.all(cities.utah.map(city => createCityCard(city)));
                utahContainer.innerHTML = utahCards.join('');
                
                // Render Colorado cities
                const coloradoContainer = document.getElementById('colorado-cities');
                const coloradoCards = await Promise.all(cities.colorado.map(city => createCityCard(city)));
                coloradoContainer.innerHTML = coloradoCards.join('');
                
            } catch (error) {
                console.error('Error initializing app:', error);
                // Fallback to simulated data if there's an error
                document.getElementById('utah-cities').innerHTML = '<div style="text-align: center; padding: 20px; color: white;">Unable to load weather data. Please check your internet connection.</div>';
                document.getElementById('colorado-cities').innerHTML = '<div style="text-align: center; padding: 20px; color: white;">Unable to load weather data. Please check your internet connection.</div>';
            }
        }

        // Start the app
        initializeApp();
        
        // Refresh weather data every 10 minutes (600,000 ms) to get updated forecasts
        setInterval(initializeApp, 600000);
        
        // Handle window resize to update map
        window.addEventListener('resize', () => {
            setTimeout(createMap, 100);
        });
    </script>
</body>
</html>
